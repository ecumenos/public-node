// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// Handlers is an autogenerated mock type for the Handlers type
type Handlers struct {
	mock.Mock
}

type Handlers_Expecter struct {
	mock *mock.Mock
}

func (_m *Handlers) EXPECT() *Handlers_Expecter {
	return &Handlers_Expecter{mock: &_m.Mock}
}

// GetPing provides a mock function with given fields: rw, r
func (_m *Handlers) GetPing(rw http.ResponseWriter, r *http.Request) {
	_m.Called(rw, r)
}

// Handlers_GetPing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPing'
type Handlers_GetPing_Call struct {
	*mock.Call
}

// GetPing is a helper method to define mock.On call
//   - rw http.ResponseWriter
//   - r *http.Request
func (_e *Handlers_Expecter) GetPing(rw interface{}, r interface{}) *Handlers_GetPing_Call {
	return &Handlers_GetPing_Call{Call: _e.mock.On("GetPing", rw, r)}
}

func (_c *Handlers_GetPing_Call) Run(run func(rw http.ResponseWriter, r *http.Request)) *Handlers_GetPing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *Handlers_GetPing_Call) Return() *Handlers_GetPing_Call {
	_c.Call.Return()
	return _c
}

func (_c *Handlers_GetPing_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *Handlers_GetPing_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewHandlers interface {
	mock.TestingT
	Cleanup(func())
}

// NewHandlers creates a new instance of Handlers. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHandlers(t mockConstructorTestingTNewHandlers) *Handlers {
	mock := &Handlers{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
